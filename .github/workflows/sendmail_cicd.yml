name: send_mail CI/CD
on:
  # 要件1. masterにプルリクがマージされると起動する。
  push:
    branches:
      - master
  # 要件2. 指定のディレクトリの更新でのみ起動する。
    paths:
      - 'src/send_mail/*.py'
      - 'src/send_mail/*.txt'

# aws cli, zip  が必要

env:
  BUCKET_NAME : "<aws-bucket-name>"
  AWS_REGION : "<aws-region>"
  OS : "ubuntu-22.04"
  AWS_ROLE_ARN: "<aws-role>"

# 要件3. AWSのリソースアクセス権限を取得する（できればOpenIdConnectを用いて）。
permissions:
  id-token: write
  contents: read

jobs:
  check-out:
    name: "unit test by pytest"
    runs-on: ${{ env.OS }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

  # 要件4. 自動テストを走らせ、もしErrorが出たら終了。
  unit-test:
    name: "unit test by pytest"
    runs-on: ${{ env.OS }}
    steps:
      - name: Install dependencies
        run: pip install pytest
      - name: Test
        run: pytest
  lint:
    name: "lint by flake8"
    runs-on: ${{ env.OS }}
    steps:
      - name: Install dependencies
        run: pip install flake8
      - name: Test
        run: flake8 --max-line-length 120
  deploy:
    name: "deploy to lambda"
    runs-on: ${{ env.OS }}
    steps:
      # 要件5. アップロードすべきファイルをZipで圧縮し、S3にPUTする。
      # 要件6. Lambda関数にアップロードする。関数バージョンも同時に作成する。
      # 要件7. エイリアスをLATESTに更新する。
      - name: deploy to lambda
        run: cd src/send_mail && bash ./upload.sh product
      # 要件8. 結果を通知する。
      - name: Slack notification of success
        uses: rtCamp/action-slack-notify@v2.2.0
        env:
          SLACK_COLOR: good 
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      # 要件ex. 失敗した場合、失敗を通知する。

  on-error:
    name: Slack notification of failure
    if: failure()
    uses: rtCamp/action-slack-notify@v2.2.0
    env:
      SLACK_COLOR: danger
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
